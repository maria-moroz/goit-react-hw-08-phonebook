{"version":3,"file":"static/js/803.43df3bd4.chunk.js","mappings":"mQAMe,SAASA,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,YAAgBC,EAAhB,EAAgBA,UAAWC,EAA3B,EAA2BA,QAQrBC,GAAUC,EAAAA,EAAAA,MACVC,GAAaD,EAAAA,EAAAA,MAEbE,EAAoB,SAAAC,GACxB,MAAwBA,EAAEC,cAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,OAAQD,GACN,IAAK,QACHb,EAASc,GACT,MAEF,IAAK,WACHZ,EAAYY,GACZ,MAEF,QACE,MAAM,IAAIC,MAAJ,gCAAmCF,MAI/C,OACE,gCACGP,IACC,cAAGU,UAAU,QAAb,wDAEF,kBAAMA,UAAU,gBAAgBC,SA9BX,SAAAN,GACvBA,EAAEO,iBAEFd,EADgB,CAAEL,MAAAA,EAAOE,SAAAA,KA4BvB,WACE,iBAAKe,UAAU,qBAAf,WACE,kBAAOA,UAAU,YAAYG,QAASZ,EAAtC,2BAGA,kBACES,UAAU,YACVI,KAAK,QACLP,KAAK,QACLC,MAAOf,EACPsB,SAAUX,EACVY,aAAa,MACbC,WAAS,EACTC,UAAQ,QAGZ,iBAAKR,UAAU,qBAAf,WACE,kBAAOA,UAAU,YAAYG,QAASV,EAAtC,uBAGA,kBACEO,UAAU,YACVI,KAAK,WACLP,KAAK,WACLC,MAAOb,EACPoB,SAAUX,EACVY,aAAa,MACbE,UAAQ,QAGZ,mBAAQR,UAAU,mBAAmBS,SAAUpB,EAAWe,KAAK,SAA/D,2BCvER,MAAyB,sBAAzB,EAAsD,oBAAtD,EAAiF,oBCGlE,SAASM,IACtB,OACE,iBAAKV,UAAU,YAAf,WACE,eAAIA,UAAWW,EAAf,mCACA,SAAC9B,EAAD,KACA,eAAGmB,UAAWW,EAAd,+BAEE,SAAC,KAAD,CAAMC,GAAG,YAAYZ,UAAWW,EAAhC,uC,wECVR,IAkBInB,EAAS,eAACqB,EAAD,uDAAQ,GAAR,OACXC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP","sources":["components/LoginForm/LoginForm.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/Login/Login.module.css?b420","pages/Login/Login.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useLoginMutation } from 'redux/auth/authApi';\n\nimport 'styles/form.css';\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [login, { isLoading, isError }] = useLoginMutation();\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const contact = { email, password };\n    login(contact);\n  };\n\n  const emailId = nanoid();\n  const passwordId = nanoid();\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'email': {\n        setEmail(value);\n        break;\n      }\n      case 'password': {\n        setPassword(value);\n        break;\n      }\n      default:\n        throw new Error(`Unsuported input name ${name}`);\n    }\n  };\n\n  return (\n    <>\n      {isError && (\n        <p className=\"error\">Something went wrong :( Please try again.</p>\n      )}\n      <form className=\"formContainer\" onSubmit={handleFormSubmit}>\n        <div className=\"formFieldContainer\">\n          <label className=\"formLabel\" htmlFor={emailId}>\n            Email adress\n          </label>\n          <input\n            className=\"formInput\"\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleInputChange}\n            autoComplete=\"off\"\n            autoFocus\n            required\n          />\n        </div>\n        <div className=\"formFieldContainer\">\n          <label className=\"formLabel\" htmlFor={passwordId}>\n            Password\n          </label>\n          <input\n            className=\"formInput\"\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleInputChange}\n            autoComplete=\"off\"\n            required\n          />\n        </div>\n        <button className=\"formSubmitButton\" disabled={isLoading} type=\"submit\">\n          Sign in\n        </button>\n      </form>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"Login_header__AvOpm\",\"text\":\"Login_text__8QGVn\",\"link\":\"Login_link__Ka0sq\"};","import { Link } from 'react-router-dom';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport s from './Login.module.css';\n\nexport default function Login() {\n  return (\n    <div className=\"container\">\n      <h1 className={s.header}>Sign in to Phonebook</h1>\n      <LoginForm />\n      <p className={s.text}>\n        New to Phonebook?\n        <Link to=\"/register\" className={s.link}>\n          Create an account\n        </Link>\n      </p>\n    </div>\n  );\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["LoginForm","useState","email","setEmail","password","setPassword","useLoginMutation","login","isLoading","isError","emailId","nanoid","passwordId","handleInputChange","e","currentTarget","name","value","Error","className","onSubmit","preventDefault","htmlFor","type","onChange","autoComplete","autoFocus","required","disabled","Login","s","to","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}